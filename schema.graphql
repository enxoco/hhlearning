# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Role {
  id: ID!
  name: String
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RoleUpdateInput {
  name: String
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
}

type Setting {
  id: ID!
  name: String
  value: String
}

input SettingWhereUniqueInput {
  id: ID
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  id: IDFilter
  name: StringFilter
  value: StringFilter
}

input SettingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  value: OrderDirection
}

input SettingUpdateInput {
  name: String
  value: String
}

input SettingUpdateArgs {
  where: SettingWhereUniqueInput!
  data: SettingUpdateInput!
}

input SettingCreateInput {
  name: String
  value: String
}

type User {
  id: ID!
  name: String
  email: String
  firstName: String
  lastName: String
  street: String
  city: String
  state: String
  phone: String
  phoneMother: String
  phoneFather: String
  zipcode: String
  role(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  roleCount(where: RoleWhereInput! = {}): Int
  isAdmin: Boolean
  isParent: Boolean
  hasPaidTuition: Boolean
  password: PasswordState
  courses(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  students: String
  student(
    where: StudentWhereInput! = {}
    orderBy: [StudentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Student!]
  studentCount(where: StudentWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  street: StringFilter
  city: StringFilter
  state: StringFilter
  phone: StringNullableFilter
  phoneMother: StringNullableFilter
  phoneFather: StringNullableFilter
  zipcode: StringFilter
  role: RoleManyRelationFilter
  isAdmin: BooleanFilter
  isParent: BooleanFilter
  hasPaidTuition: BooleanFilter
  courses: CourseManyRelationFilter
  student: StudentManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input StudentManyRelationFilter {
  every: StudentWhereInput
  some: StudentWhereInput
  none: StudentWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  street: OrderDirection
  city: OrderDirection
  state: OrderDirection
  phone: OrderDirection
  phoneMother: OrderDirection
  phoneFather: OrderDirection
  zipcode: OrderDirection
  isAdmin: OrderDirection
  isParent: OrderDirection
  hasPaidTuition: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  firstName: String
  lastName: String
  street: String
  city: String
  state: String
  phone: String
  phoneMother: String
  phoneFather: String
  zipcode: String
  role: RoleRelateToManyForUpdateInput
  isAdmin: Boolean
  isParent: Boolean
  hasPaidTuition: Boolean
  password: String
  courses: CourseRelateToManyForUpdateInput
  student: StudentRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input StudentRelateToManyForUpdateInput {
  disconnect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  firstName: String
  lastName: String
  street: String
  city: String
  state: String
  phone: String
  phoneMother: String
  phoneFather: String
  zipcode: String
  role: RoleRelateToManyForCreateInput
  isAdmin: Boolean
  isParent: Boolean
  hasPaidTuition: Boolean
  password: String
  courses: CourseRelateToManyForCreateInput
  student: StudentRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input StudentRelateToManyForCreateInput {
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

type Student {
  id: ID!
  parent: User
  myCourses: String
  name: String
  firstName: String
  lastName: String
  courses(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
}

input StudentWhereUniqueInput {
  id: ID
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  id: IDFilter
  parent: UserWhereInput
  firstName: StringFilter
  lastName: StringFilter
  courses: CourseManyRelationFilter
}

input StudentOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
}

input StudentUpdateInput {
  parent: UserRelateToOneForUpdateInput
  firstName: String
  lastName: String
  courses: CourseRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input StudentUpdateArgs {
  where: StudentWhereUniqueInput!
  data: StudentUpdateInput!
}

input StudentCreateInput {
  parent: UserRelateToOneForCreateInput
  firstName: String
  lastName: String
  courses: CourseRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Course {
  id: ID!
  name: String
  grade: String
  feedback: String
  feedbackLength: String
  student: Student
  teacher: User
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  name: StringFilter
  grade: StringNullableFilter
  feedback: StringFilter
  student: StudentWhereInput
  teacher: UserWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  name: OrderDirection
  grade: OrderDirection
  feedback: OrderDirection
}

input CourseUpdateInput {
  name: String
  grade: String
  feedback: String
  student: StudentRelateToOneForUpdateInput
  teacher: UserRelateToOneForUpdateInput
}

input StudentRelateToOneForUpdateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
  disconnect: Boolean
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  name: String
  grade: String
  feedback: String
  student: StudentRelateToOneForCreateInput
  teacher: UserRelateToOneForCreateInput
}

input StudentRelateToOneForCreateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
}

type Semester {
  id: ID!
  name: String
}

input SemesterWhereUniqueInput {
  id: ID
}

input SemesterWhereInput {
  AND: [SemesterWhereInput!]
  OR: [SemesterWhereInput!]
  NOT: [SemesterWhereInput!]
  id: IDFilter
  name: StringFilter
}

input SemesterOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SemesterUpdateInput {
  name: String
}

input SemesterUpdateArgs {
  where: SemesterWhereUniqueInput!
  data: SemesterUpdateInput!
}

input SemesterCreateInput {
  name: String
}

type ReportCardSetting {
  id: ID!
  title: String
  address: String
  semester: Semester
}

input ReportCardSettingWhereUniqueInput {
  id: ID
}

input ReportCardSettingWhereInput {
  AND: [ReportCardSettingWhereInput!]
  OR: [ReportCardSettingWhereInput!]
  NOT: [ReportCardSettingWhereInput!]
  id: IDFilter
  title: StringFilter
  address: StringFilter
  semester: SemesterWhereInput
}

input ReportCardSettingOrderByInput {
  id: OrderDirection
  title: OrderDirection
  address: OrderDirection
}

input ReportCardSettingUpdateInput {
  title: String
  address: String
  semester: SemesterRelateToOneForUpdateInput
}

input SemesterRelateToOneForUpdateInput {
  create: SemesterCreateInput
  connect: SemesterWhereUniqueInput
  disconnect: Boolean
}

input ReportCardSettingUpdateArgs {
  where: ReportCardSettingWhereUniqueInput!
  data: ReportCardSettingUpdateInput!
}

input ReportCardSettingCreateInput {
  title: String
  address: String
  semester: SemesterRelateToOneForCreateInput
}

input SemesterRelateToOneForCreateInput {
  create: SemesterCreateInput
  connect: SemesterWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createSetting(data: SettingCreateInput!): Setting
  createSettings(data: [SettingCreateInput!]!): [Setting]
  updateSetting(
    where: SettingWhereUniqueInput!
    data: SettingUpdateInput!
  ): Setting
  updateSettings(data: [SettingUpdateArgs!]!): [Setting]
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteSettings(where: [SettingWhereUniqueInput!]!): [Setting]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createStudent(data: StudentCreateInput!): Student
  createStudents(data: [StudentCreateInput!]!): [Student]
  updateStudent(
    where: StudentWhereUniqueInput!
    data: StudentUpdateInput!
  ): Student
  updateStudents(data: [StudentUpdateArgs!]!): [Student]
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteStudents(where: [StudentWhereUniqueInput!]!): [Student]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createSemester(data: SemesterCreateInput!): Semester
  createSemesters(data: [SemesterCreateInput!]!): [Semester]
  updateSemester(
    where: SemesterWhereUniqueInput!
    data: SemesterUpdateInput!
  ): Semester
  updateSemesters(data: [SemesterUpdateArgs!]!): [Semester]
  deleteSemester(where: SemesterWhereUniqueInput!): Semester
  deleteSemesters(where: [SemesterWhereUniqueInput!]!): [Semester]
  createReportCardSetting(
    data: ReportCardSettingCreateInput!
  ): ReportCardSetting
  createReportCardSettings(
    data: [ReportCardSettingCreateInput!]!
  ): [ReportCardSetting]
  updateReportCardSetting(
    where: ReportCardSettingWhereUniqueInput!
    data: ReportCardSettingUpdateInput!
  ): ReportCardSetting
  updateReportCardSettings(
    data: [ReportCardSettingUpdateArgs!]!
  ): [ReportCardSetting]
  deleteReportCardSetting(
    where: ReportCardSettingWhereUniqueInput!
  ): ReportCardSetting
  deleteReportCardSettings(
    where: [ReportCardSettingWhereUniqueInput!]!
  ): [ReportCardSetting]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  sendUserMagicAuthLink(email: String!): Boolean!
  redeemUserMagicAuthToken(
    email: String!
    token: String!
  ): RedeemUserMagicAuthTokenResult!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

union RedeemUserMagicAuthTokenResult =
    RedeemUserMagicAuthTokenSuccess
  | RedeemUserMagicAuthTokenFailure

type RedeemUserMagicAuthTokenSuccess {
  token: String!
  item: User!
}

type RedeemUserMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  settings(
    where: SettingWhereInput! = {}
    orderBy: [SettingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Setting!]
  setting(where: SettingWhereUniqueInput!): Setting
  settingsCount(where: SettingWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  students(
    where: StudentWhereInput! = {}
    orderBy: [StudentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Student!]
  student(where: StudentWhereUniqueInput!): Student
  studentsCount(where: StudentWhereInput! = {}): Int
  courses(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  course(where: CourseWhereUniqueInput!): Course
  coursesCount(where: CourseWhereInput! = {}): Int
  semesters(
    where: SemesterWhereInput! = {}
    orderBy: [SemesterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Semester!]
  semester(where: SemesterWhereUniqueInput!): Semester
  semestersCount(where: SemesterWhereInput! = {}): Int
  reportCardSettings(
    where: ReportCardSettingWhereInput! = {}
    orderBy: [ReportCardSettingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReportCardSetting!]
  reportCardSetting(
    where: ReportCardSettingWhereUniqueInput!
  ): ReportCardSetting
  reportCardSettingsCount(where: ReportCardSettingWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
